Reviewer 1:
8
1. In the entry point document the Network, Distributor, and Assigner modules appears to have overlapping functionality. Module diagram seems outdated, should be updated to show correct message-passing and information-flow. 
2. main.go file is well structured and easy to read and channel names are descriptive. Shows components and dependencies in the project. 
3. Not clear why the watchdog module needs to be separated from the timer module. 
4. Elevator pointer is sent to distributor allowing for this struct to be manipulated/changed. This can lead to race conditions and bugs that are hard to trace (traceability). Makes it less clear what module is responsible/allowed to manipulate the states.
5. Some functions are large making them difficult to read. This is the case for the Distributor function. Maybe try creating more functions for handling the cases which in turn could improve readability and modularity. 
6. Parts of the code use a lot of nested for- and if-scopes, making the code less readable (assigner.ReassignOrders and distributor.updateElevators).
7. Config-module: Good solution for using the same types/structs in different modules and avoiding import-cycles. 

Reviewer 2:
8
- The code has a clean modular structure with separate modules for the main components, but distributor.go could be further split up for better responsibility isolation, as it handles both local logic and communication with other elevators.
- AssignOrder in assigner.go handles multiple responsibilities simultaneously, which reduces readability. The separation of functionality could be clearer, ideally with more comments to explain what each part does.
- The communication between modules and the use of channels are well-structured.
- The documentation in the entry point document, along with the module_diagram, provides a good overview of how to set up and run the system, but details regarding error handling and internal mechanisms could be better described.
- Values like 999 in cost.go and 99999 in assigner.go should be defined as constants with descriptive names to improve readability.
- While many functions have short comments, they are often descriptive rather than explanatory. The comments could provide more information about why and when a function is used.

Reviewer 3:
7
The project is split into several packages. However, some modules (notably distributor) have a lot of logic and do a lot of things. This could be split into several files to ensure better code coherence, clarity and maintainability. Also the cost module and request module could probably be merged into one module as these are very similar. 
The main function gives a good overview of which components that are interacting, and the different channels are initialized in a tidy way. It is easy to follow the different cases in the distributor, but it could become clearer separating different channels into structs corresponding to each module. Like creating a distributorChannel struct, with its relevant channels.. 
The code makes good use of channels for communication between modules and manages states locally within each function. Still, the state transitions could benefit from clearer documentation. The distributor for example, although having clear cases, has functions with A LOT of logic within each case such as for loops and if statements. I would try to code this differently if possible, or at least comment and have more prints to up the code quality. 
Overall, the naming is understandable and consistent. 
Some modules, like watchdog and the networking parts, implement basic error handling. However, critical sections such as order assignment and state updates could use more error checks and fallback strategies to ensure fault tolerance. For debugging purposes you should also implement more prints to ensure that you actually get the values you expect, as I said previously this would especially be smart to do in distributor and assigner. 
While the code is somewhat self-explanatory and straightforward in some areas, the more complex algorithms (especially in cost calculation and distributor logic) would benefit from more detailed comments that explain the reasoning behind design decisions, and some places have unnecessary comments. So I would go through the code and try to look at it from an outside perspective and check if the comment is necessary or if it explains the code well. 
The directory structure is logically organized by functionality, which is good. A more detailed README or internal documentation could make the project more understandable. The module_diagram gives a good overview of your solution.

Reviewer 4:
8
There are several function calls in main that could be grouped into i.e. 'top module functions' to improve readability. For example, could all calls to Transmitter() and Receiver() be merged into a network() function? Similarly, could the Poll functions from the elevio package be moved from main to the elevator package along with elevio? The entry point (main) could benefit from aligning more closely with your class diagram by clearly revealing the actual top modules.
It is clear from the entry point how the implemented channels are to be used for connecting the modules, both through your comments and your naming convention. 
For the structural part, maybe rename the top folder which is now named driver-go? Modules could be placed hierarchily under each other for better structure. For example, "elevator", "elevio", "fsm", "request" could be placed in the same folder "elevator".
Config file: Structs for the elevator types should not be in the config-file but rather in the place close to where they are relevant, perhaps under the elevator folder.
Your distributor function seems to handle everything related to the elevator list while avoiding shared states between threads - which is great. It might be a bottleneck for you system though, since it has a lot of incoming channels starting cases that requires computing. If you start having problems with this, maybe consider breaking it up further and synchronizing differently.
Your naming convention along with your comments makes the code readable and traceable througout the modules. Great!
Overall, ignoring the fact that the structure is a little bit messy, it looks like you have implemented functionality for all the key parts of the project.
