140cac47
8
- Exessive commenting. We have comments for everything, some appear a bit over the top. 
- There are several go routines running at the same time. From main it is not clear what does what. 
- The distributer file does a lot of the work. Maybe more than the module should. 
- Could possibly move the broadcast function from the distributer to the network folder. 

0903f129
8
- Looking from main there appears to be two modules running, both using the same channels as input. 
- Handling errors before initializing the go routines is not a bad idea :) 
- Network deals with network and distributing orders, where the primary distributes orders to its 
- The files config and elevator are clean and contains only constants. 
- The RunElevatorFSM seems to be some kind of do it all module. It is a very large and complex function making it a bit hard to understand and possibly also hard to maintain. 
- I do not understand what TimeToServeRequest and why it is placed in elevator fsm. It is not used? Could this be a separate module?
- I am unsure wether the primary and the backup handles all errors correcly such as the primary falling out, as it appears to be very dependent on the primary to function. 
- Overall the code is quite good, it is easy to read and mostly understandable. There are some smaller errors as commented above, but i think they should be an easy fix. 

26da5b8d
6
- From main you cannot see any go rutines or channels beeing made/used. There is also a global variable named logger, which is not very informative. Immediate thoughts are what is a logger, and why do we run a logger?
- Other than that you can see that an elevtor is initialized and broadcasted to the network and that there is a listening functin. It is not clear what structure the system is in or how the procedures work. 
- There is also a seperate folder containing the same main file, but for testing? The main files are also located in a folder for control, which seems resonable. 
- Internal looks from the outside to contain the implementation for the elevator, the control, constants, events and data handling, so all modules. I will point out that it is a bit odd to have a control folder and one interal folder, and then have all control implemented in internal. 
- The Elevator creates an elevator full of threads, but the code seems a bit hard to expand if you wish to add a new thread you need to add it manually as threads are launched one by one. 
- The code contains three main files, two are similar but in different folders (both folders in cmd) and one main file in the network folder in the end. It is very confusing reading the code and trying to figure out what to run and which functions are used. 
- Looking through the internal folder there are a lot of modules for elevator, elevator control, elevator constants, elevator event, metadata, network, state, utensils and logger. I do not enirely see the differnece between all these modules and the functions in them. There are a lot of test functions but none testing the full system and not really easy to see what is tested and if there ever is any function testing the entire system. 
- There is also a folder for elevator constants, yet there are more constants in elevatorcmd and they do not have an assigned type other than struct. 
- In all there are also several files containing a newElevator, a start and a stop function. Which does what and why are they all called exactly the same? 
- Elevstate seems to contain both the configuration of elevator states and an fsm for the elevator, this should maybe be separate. 
- The elevutils seems to contain random functions, should be a bit more clean. 
- Overall it is very hard to understand the code, reading the readme file helps a bit, but without it there is just way to much stuff going on. 

14f70cff
8
- First impression looking at main is good. There are several go routines started and a couple of channels made. I will only comment on the fact that you have the function pollDoorTimer here, could this be moved?
- I do not understand what the backup.Backup call in main does. I get that it creates an elevator (backup elevator) but what is the function of the comment taken as input? Is this something that is supposed to be changed or something not finished?
- You have a updateWorldview function that is not used? This might just be something you are already working on but it could either be removed or used. I seems like the elevator_interface file is not finished, but i think you are headed in the right direction. 
- The distribution folder only contains files for network and communication. You could consider changing the name of this folder to network or communication or interface o.l. 
- The fsm file contains several fsm functions, it might me more intuitive to have one fsm function handling the different states and add helper functions for the rest. Now there are separate helperfunctions for different senarios. Making a single fsm function handling the states looks cleaner in main as well as it could be called as a seperate go routine. 
- Overall I think that the code is understandable and clean. The file and foldernames make sense, and the modules are distributed in a good way. Functions have good and informative names. Not to many comments, but they appear when things were unclear. 

